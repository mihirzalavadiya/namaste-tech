{
  "2e781703-598e-4863-9d51-9de485cbc21a": {
    "problem": "Description\r\n\r\nIn this task, you are asked to create a Chips Input component that allows users to input a series of tags or keywords. The component will display these tags as \"chips\" (small labels), which users can add and remove dynamically.\r\n\r\nFeatures:\r\n\r\nInput Field: Users can type text into an input field.\r\n\r\nAdd Chips: When the user presses the \"Enter\" key, the typed text will be added as a new chip (tag). Empty or whitespace-only chips should not be added.\r\n\r\nRemove Chips: Users can delete a chip by clicking the \"X\" button next to it.\r\n\r\nHorizontal Display: The chips should be displayed in a horizontal list.\r\n\r\nPersistence: The list of chips should be maintained even when the component re-renders.\r\n\r\nImportant Points:\r\n\r\nThe input field should be of type text.\r\n\r\nButton should be labeled \"X\" to delete chips\r\n\r\nIf two chips have the same name, deleting one should NOT delete both.\r\n\r\nMake sure to use onKeyDown event handler instead of onKeyPress because onKeyPress is deprecated.",
    "solution": "",
    "files": [
      {
        "filename": "App.js",
        "language": "javascript",
        "code": "import ChipsInput from './ChipsInput.js'\r\nexport default function App() {\r\n  return <ChipsInput/>\r\n}\r\n"
      },
      {
        "filename": "ChipsInput.js",
        "language": "javascript",
        "code": "import React, { useState } from 'react';\nimport './styles.css';\n\nfunction ChipsInput() {\n  const [chips, setChips] = useState([]);\n  const [inputData, setInputData] = useState(\"\");\n\n  const keyDown = (e) => {\n    if (e.key === 'Enter') {\n      const data = inputData.trim();\n      if (data && !chips.includes(data)) {\n        setChips([...chips, data]);\n      }\n      setInputData(\"\");\n    }\n  };\n\n  const removeChip = (indexToRemove) => {\n    setChips(chips.filter((_, index) => index !== indexToRemove));\n  };\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", margin: \"40px 0\" }}>\n      <h2>Chips Input</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Type a chip and press enter\"\n        value={inputData}\n        style={{ padding: \"8px\", width: \"200px\" }}\n        onChange={(e) => setInputData(e.target.value)}\n        onKeyDown={keyDown}\n      />\n      <div className=\"chips-container\">\n        {chips.map((chip, index) => (\n          <div key={index} className=\"chip\">\n            {chip}\n            <button onClick={() => removeChip(index)} className=\"deleteBtn\">X</button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChipsInput;"
      },
      {
        "filename": "styles.css",
        "language": "css",
        "code": ".main-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n.input {\r\n    padding: 8px;\r\n    width: 200px;\r\n}"
      }
    ],
    "examples": []
  },
  "d4f6c8e2-1b4e-4c3a-9f3a-2c3e4b5f6a7b": {
    "problem": "\r\nWrite a function that takes a sentence as input and returns a new sentence where the first letter of each word is capitalized, and the rest of the letters are in lowercase.\r\n\r\nInput: A string sentence containing one or more words separated by spaces.\r\nOutput: A new string where each word starts with an uppercase letter followed by lowercase letters.\r\n\r\nConstraints & Edge Cases\r\n\r\nInput may have multiple spaces between words.\r\n\r\nInput may contain uppercase, lowercase, or mixed-case characters.\r\n\r\nInput can be an empty string.\r\n\r\nWords can contain letters only; punctuation is not considered in this challenge.\r\n\r\nLeading/trailing spaces should be trimmed in the final result.",
    "solution": "",
    "code": "function capitalizeWords(sentence) {\n    // Your implementation\n    return sentence\n        .trim()\n        .split(/\\s+/)\n        .map(word =>\n            word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n        )\n        .join(\" \");\n}\n\n// For the purpose of user debugging.\ncapitalizeWords(\"hello world\");\nmodule.exports = capitalizeWords",
    "files": [
      {
        "filename": "index.js",
        "language": "javascript",
        "code": "function capitalizeWords(sentence) {\n    // Your implementation\n    return sentence\n        .trim()\n        .split(/\\s+/)\n        .map(word =>\n            word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n        )\n        .join(\" \");\n}\n\n// For the purpose of user debugging.\ncapitalizeWords(\"hello world\");\nmodule.exports = capitalizeWords"
      }
    ],
    "examples": [
      {
        "input": "hello world",
        "output": "Hello World"
      },
      {
        "input": "javaScript is FUN",
        "output": "Javascript Is Fun"
      },
      {
        "input": " multiple  spaces  ",
        "output": "Multiple Spaces"
      },
      {
        "input": "",
        "output": ""
      }
    ]
  },
  "a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6": {
    "problem": "You are tasked with building a Color Explorer \u2014 a React-based application that helps users explore colors by typing in natural language color names like \"lavender\", \"skyblue\", or \"darkorange\".\r\n\r\nThe app matches the user's input against a predefined color dictionary and displays the color name and its corresponding HEX code with a beautiful circular preview.\r\n\r\nYour goal is to:\r\n\r\nConvert any valid CSS color name into its HEX code.\r\n\r\nDisplay the color preview in a visually appealing circular shape.\r\n\r\nHandle typos or unsupported color names with a helpful error.\r\n\r\nDeliver a responsive, accessible, and easy-to-use interface.\r\n\r\nRequirements\r\n\r\nAn input field for the user to enter a color name.\r\n\r\nA search button to trigger the conversion and display.\r\n\r\nIf valid:\r\n\r\nShow color name\r\n\r\nShow HEX code\r\n\r\nShow a circular color preview\r\n\r\nIf invalid:\r\n\r\nShow error message like: \"Sorry, I couldn't recognize that color.\"\r\n\r\nSupported Color Names\r\n\r\nThe app supports 140+ standard CSS color names listed in colorData.js file. Input is case-insensitive and whitespace is ignored.\r\n\r\nEdge Cases & Constraints\r\n\r\nInput should be trimmed and converted to lowercase before matching.\r\n\r\nColor names with extra spaces or different casing should still work (\" Light Gray \").\r\n\r\nOnly exact matches from the dictionary provided in the colorData.js will be recognized.\r\n\r\nIf the input is not in the list, a clear error should appear and remove the previous result.\r\n\r\nData Test IDs (required for testing)\r\n\r\ndata-testid=\"color-input\": The input field for color name\r\n\r\ndata-testid=\"search-button\": The button that triggers search\r\n\r\ndata-testid=\"color-name\": The rendered color name\r\n\r\ndata-testid=\"color-hex\": The rendered HEX code\r\n\r\ndata-testid=\"color-preview\": The circle showing color preview\r\n\r\ndata-testid=\"error-msg\": Error display when input is invalid\r\n\r\ndata-testid=\"color-box\": Container for valid result",
    "solution": "",
    "files": [
      {
        "filename": "App.js",
        "language": "javascript",
        "code": "import ColorExplorer from './ColorExplorer'\r\nexport default function App() {\r\n  return <ColorExplorer/>\r\n}\r\n"
      },
      {
        "filename": "ColorExplorer.js",
        "language": "javascript",
        "code": "import React, { useState } from 'react';\r\nimport { colorNameToHex } from \"./colorData\";\r\nimport \"./styles.css\";\r\n\r\nconst ColorExplorer = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [colorName, setColorName] = useState(\"\");\r\n  const [hex, setHex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleSearch = () => {\r\n    const normalized = input.trim().toLowerCase().replace(/\\s+/g, \"\");\r\n    const result = colorNameToHex(input);\r\n\r\n    if (result) {\r\n      setColorName(normalized); // \u2705 store normalized color name\r\n      setHex(result);\r\n      setError(\"\");\r\n    } else {\r\n      setColorName(\"\");\r\n      setHex(\"\");\r\n      setError(\"Sorry, I couldn't recognize that color.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Color Explorer</h1>\r\n      <div className=\"input-section\">\r\n        <input\r\n          type=\"text\"\r\n          data-testid=\"color-input\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type a color name e.g. lavender\"\r\n        />\r\n        <button onClick={handleSearch} data-testid=\"search-button\">\uD83D\uDD0D</button>\r\n      </div>\r\n\r\n      {hex && (\r\n        <div className=\"color-box\" data-testid=\"color-box\">\r\n          <div\r\n            className=\"preview\"\r\n            data-testid=\"color-preview\"\r\n            style={{ backgroundColor: hex }}\r\n          ></div>\r\n          <p>\r\n            <strong>Name:</strong>{\" \"}\r\n            <span data-testid=\"color-name\">{colorName}</span>\r\n          </p>\r\n          <p>\r\n            <strong>Hex:</strong>{\" \"}\r\n            <span data-testid=\"color-hex\">{hex}</span>\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {error && <p className=\"error\" data-testid=\"error-msg\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorExplorer;\r\n"
      },
      {
        "filename": "colorData.js",
        "language": "javascript",
        "code": "const colors = {\r\n  aliceblue: \"#f0f8ff\",\r\n  antiquewhite: \"#faebd7\",\r\n  aqua: \"#00ffff\",\r\n  aquamarine: \"#7fffd4\",\r\n  azure: \"#f0ffff\",\r\n  beige: \"#f5f5dc\",\r\n  bisque: \"#ffe4c4\",\r\n  black: \"#000000\",\r\n  blanchedalmond: \"#ffebcd\",\r\n  blue: \"#0000ff\",\r\n  blueviolet: \"#8a2be2\",\r\n  brown: \"#a52a2a\",\r\n  burlywood: \"#deb887\",\r\n  cadetblue: \"#5f9ea0\",\r\n  chartreuse: \"#7fff00\",\r\n  chocolate: \"#d2691e\",\r\n  coral: \"#ff7f50\",\r\n  cornflowerblue: \"#6495ed\",\r\n  cornsilk: \"#fff8dc\",\r\n  crimson: \"#dc143c\",\r\n  cyan: \"#00ffff\",\r\n  darkblue: \"#00008b\",\r\n  darkcyan: \"#008b8b\",\r\n  darkgoldenrod: \"#b8860b\",\r\n  darkgray: \"#a9a9a9\",\r\n  darkgreen: \"#006400\",\r\n  darkgrey: \"#a9a9a9\",\r\n  darkkhaki: \"#bdb76b\",\r\n  darkmagenta: \"#8b008b\",\r\n  darkolivegreen: \"#556b2f\",\r\n  darkorange: \"#ff8c00\",\r\n  darkorchid: \"#9932cc\",\r\n  darkred: \"#8b0000\",\r\n  darksalmon: \"#e9967a\",\r\n  darkseagreen: \"#8fbc8f\",\r\n  darkslateblue: \"#483d8b\",\r\n  darkslategray: \"#2f4f4f\",\r\n  darkslategrey: \"#2f4f4f\",\r\n  darkturquoise: \"#00ced1\",\r\n  darkviolet: \"#9400d3\",\r\n  deeppink: \"#ff1493\",\r\n  deepskyblue: \"#00bfff\",\r\n  dimgray: \"#696969\",\r\n  dimgrey: \"#696969\",\r\n  dodgerblue: \"#1e90ff\",\r\n  firebrick: \"#b22222\",\r\n  floralwhite: \"#fffaf0\",\r\n  forestgreen: \"#228b22\",\r\n  fuchsia: \"#ff00ff\",\r\n  gainsboro: \"#dcdcdc\",\r\n  ghostwhite: \"#f8f8ff\",\r\n  gold: \"#ffd700\",\r\n  goldenrod: \"#daa520\",\r\n  gray: \"#808080\",\r\n  green: \"#008000\",\r\n  greenyellow: \"#adff2f\",\r\n  grey: \"#808080\",\r\n  honeydew: \"#f0fff0\",\r\n  hotpink: \"#ff69b4\",\r\n  indianred: \"#cd5c5c\",\r\n  indigo: \"#4b0082\",\r\n  ivory: \"#fffff0\",\r\n  khaki: \"#f0e68c\",\r\n  lavender: \"#e6e6fa\",\r\n  lavenderblush: \"#fff0f5\",\r\n  lawngreen: \"#7cfc00\",\r\n  lemonchiffon: \"#fffacd\",\r\n  lightblue: \"#add8e6\",\r\n  lightcoral: \"#f08080\",\r\n  lightcyan: \"#e0ffff\",\r\n  lightgoldenrodyellow: \"#fafad2\",\r\n  lightgray: \"#d3d3d3\",\r\n  lightgreen: \"#90ee90\",\r\n  lightgrey: \"#d3d3d3\",\r\n  lightpink: \"#ffb6c1\",\r\n  lightsalmon: \"#ffa07a\",\r\n  lightseagreen: \"#20b2aa\",\r\n  lightskyblue: \"#87cefa\",\r\n  lightslategray: \"#778899\",\r\n  lightslategrey: \"#778899\",\r\n  lightsteelblue: \"#b0c4de\",\r\n  lightyellow: \"#ffffe0\",\r\n  lime: \"#00ff00\",\r\n  limegreen: \"#32cd32\",\r\n  linen: \"#faf0e6\",\r\n  magenta: \"#ff00ff\",\r\n  maroon: \"#800000\",\r\n  mediumaquamarine: \"#66cdaa\",\r\n  mediumblue: \"#0000cd\",\r\n  mediumorchid: \"#ba55d3\",\r\n  mediumpurple: \"#9370db\",\r\n  mediumseagreen: \"#3cb371\",\r\n  mediumslateblue: \"#7b68ee\",\r\n  mediumspringgreen: \"#00fa9a\",\r\n  mediumturquoise: \"#48d1cc\",\r\n  mediumvioletred: \"#c71585\",\r\n  midnightblue: \"#191970\",\r\n  mintcream: \"#f5fffa\",\r\n  mistyrose: \"#ffe4e1\",\r\n  moccasin: \"#ffe4b5\",\r\n  navajowhite: \"#ffdead\",\r\n  navy: \"#000080\",\r\n  oldlace: \"#fdf5e6\",\r\n  olive: \"#808000\",\r\n  olivedrab: \"#6b8e23\",\r\n  orange: \"#ffa500\",\r\n  orangered: \"#ff4500\",\r\n  orchid: \"#da70d6\",\r\n  palegoldenrod: \"#eee8aa\",\r\n  palegreen: \"#98fb98\",\r\n  paleturquoise: \"#afeeee\",\r\n  palevioletred: \"#db7093\",\r\n  papayawhip: \"#ffefd5\",\r\n  peachpuff: \"#ffdab9\",\r\n  peru: \"#cd853f\",\r\n  pink: \"#ffc0cb\",\r\n  plum: \"#dda0dd\",\r\n  powderblue: \"#b0e0e6\",\r\n  purple: \"#800080\",\r\n  rebeccapurple: \"#663399\",\r\n  red: \"#ff0000\",\r\n  rosybrown: \"#bc8f8f\",\r\n  royalblue: \"#4169e1\",\r\n  saddlebrown: \"#8b4513\",\r\n  salmon: \"#fa8072\",\r\n  sandybrown: \"#f4a460\",\r\n  seagreen: \"#2e8b57\",\r\n  seashell: \"#fff5ee\",\r\n  sienna: \"#a0522d\",\r\n  silver: \"#c0c0c0\",\r\n  skyblue: \"#87ceeb\",\r\n  slateblue: \"#6a5acd\",\r\n  slategray: \"#708090\",\r\n  slategrey: \"#708090\",\r\n  snow: \"#fffafa\",\r\n  springgreen: \"#00ff7f\",\r\n  steelblue: \"#4682b4\",\r\n  tan: \"#d2b48c\",\r\n  teal: \"#008080\",\r\n  thistle: \"#d8bfd8\",\r\n  tomato: \"#ff6347\",\r\n  turquoise: \"#40e0d0\",\r\n  violet: \"#ee82ee\",\r\n  wheat: \"#f5deb3\",\r\n  white: \"#ffffff\",\r\n  whitesmoke: \"#f5f5f5\",\r\n  yellow: \"#ffff00\",\r\n  yellowgreen: \"#9acd32\",\r\n};\r\n\r\nexport const colorNameToHex = (name) => {\r\n  if (!name) return null;\r\n  const normalized = name.trim().toLowerCase().replace(/\\s+/g, \"\");\r\n  return colors[normalized] || null;\r\n};\r\n"
      },
      {
        "filename": "styles.css",
        "language": "css",
        "code": "body {\r\n  margin: 0;\r\n  font-family: \"Segoe UI\", sans-serif;\r\n  user-select: none;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.container {\r\n  max-width: 720px;\r\n  margin: 50px auto;\r\n  padding: 40px 50px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 16px;\r\n  box-shadow: 0 10px 26px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  height:500px\r\n}\r\n\r\n.container h1 {\r\n``  font-size: 2.5rem;\r\n  margin-bottom: 30px;\r\n  color: #134040;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n.input-section {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 14px;\r\n  margin-bottom: 25px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.input-section input {\r\n  padding: 12px 16px;\r\n  font-size: 16px;\r\n  border: 2px solid lightgray;\r\n  border-radius: 8px;\r\n  width: 240px;\r\n  background-color: #ffffff;\r\n  transition: border 0.3s ease;\r\n}\r\n\r\n.input-section input:focus {\r\n  border-color: gray;\r\n  outline: none;\r\n}\r\n\r\n.input-section button {\r\n  padding: 12px 18px;\r\n  font-size: 16px;\r\n  background-color: white;\r\n  color: #ffffff;\r\n  border: 2px solid lightgray;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 4px 12px rgba(20, 123, 116, 0.3);\r\n}\r\n\r\n.input-section button:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.color-box {\r\n  background-color: #ffffff;\r\n  padding: 30px 20px;\r\n  border-radius: 14px;\r\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);\r\n  margin-top: 25px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.color-box:hover {\r\n  transform: scale(1.02);\r\n}\r\n\r\n.preview {\r\n  width: 120px;\r\n  height: 120px;\r\n  border-radius: 50%;\r\n  margin: 0 auto 18px;\r\n  border: 3px solid #ccc;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.color-box p {\r\n  font-size: 18px;\r\n  margin: 6px 0;\r\n}\r\n\r\n.error {\r\n  color: #c0392b;\r\n  font-weight: bold;\r\n  margin-top: 20px;\r\n  font-size: 16px;\r\n}\r\n"
      }
    ]
  }
}
